#pragma once

#include <string>
#include <vector>
#include <stack>
#include <cctype>
#include <iostream>
#include <cstdlib>
#include "Tokens.h"

using std::string;
using std::vector;
using std::stack;
using std::cout;
using std::endl;

using TokenArray = vector<Tokens>;

class Parser {
public:
    /// <summary>
	/// Default constructor for the Parser class.
    /// </summary>
    Parser() = default;

    /// <summary>
	/// Parse the input string into tokens.
    /// </summary>
    /// <param name="src"></param>
	/// Source file to parse.
    /// <param name="separator"></param>
	/// Separator string to use for tokenization (default is empty).
    void Parse(const string& src, const string& separator = "");

    /// <summary>
	/// Evaluate the parsed expression and return the result.
    /// </summary>
    /// <returns></returns>
    double Evaluate(); 

    /// <summary>
	/// Print the tokens generated by the parser.
    /// </summary>
    void PrintTokens() const;

private:
    /// <summary>
	/// Tokenize the input string into tokens.
    /// </summary>
    /// <param name="src"></param>
    /// <returns></returns>
    TokenArray Tokenize(const string& src);
    /// <summary>
	/// Add a token to the parser's token list.
    /// </summary>
    /// <param name="Value"></param>
    void AddToken(string Value);
    /// <summary>
	/// Trim leading and trailing whitespace from a string.
    /// </summary>
    /// <param name="str"></param>
    /// <returns></returns>
    string Trim(const string& str) const;
    /// <summary>
	/// Check if a character is valid.
    /// </summary>
    /// <param name="c"></param>
    /// <returns></returns>
    bool IsValid(char c) const;
    /// <summary>
	/// Check if a string is an operator.
    /// </summary>
    /// <param name="str"></param>
    /// <returns></returns>
    bool IsOperator(const string& str) const;
	/// <summary>
	/// Get the priority of an operator.
	/// </summary>
	/// <param name="op"></param>
	/// <returns></returns>
	/// 1 for + and -, 2 for * and /, 0 for others
	int GetPriority(const string& op) const;
    /// <summary>
	/// Transform the tokens into Reverse Polish Notation.
    /// </summary>
    /// <returns></returns>
    TokenArray ToReversePolish() const;
    /// <summary>
	/// Evaluate the expression in Reverse Polish Notation (RPN).
    /// </summary>
    /// <param name="rpn"></param>
    /// <returns></returns>
    double EvaluatePolish(const TokenArray& rpn) const;

private:
	vector<Tokens> m_tokens; // Store tokens
     
	const vector<string> m_operators = { "+", "-", "*", "/", "=", "(", ")" }; // defined operators
};
